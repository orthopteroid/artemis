apply plugin: 'com.android.application'

// http://blog.gaku.net/ndk/    <----- ndk/gradle hacks

android {
    signingConfigs {
        config {
            keyAlias 'alias1'
            keyPassword 'spring1key'
            storeFile file('android-studio-keystore.jks')
            storePassword 'spring1store'
        }
    }
    compileSdkVersion 15
    buildToolsVersion '26.0.2'
    ////////////////
    // https://developer.android.com/studio/projects/add-native-code.html#download-ndk
    externalNativeBuild {
        cmake {

            version "3.7.1"
        }
    }
    defaultConfig {
        applicationId 'com.tereslogica.arcanacard'
        minSdkVersion 8
        targetSdkVersion 8
        // see productFlavors section for versionCode/Name magic
        versionCode 8
        versionName '1.7'
        // https://software.intel.com/en-us/videos/using-the-ndk-with-android-studio
        ndk {
            moduleName "ArtemisLib"
            cFlags "-std=c99 -Wno-multichar -I${project.buildDir}/../src/main/jni/libartemis-inc"
        }
        signingConfig signingConfigs.config
    }
    // http://stackoverflow.com/questions/17637179/how-to-set-source-1-7-in-android-studio-and-gradle
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    /////////////////
    buildTypes {
        release {
            debuggable false
            jniDebuggable false
            minifyEnabled true
        }
        debug {
            // http://stackoverflow.com/questions/8674434/debugging-native-libraries-for-android-os
            // https://vilimpoc.org/blog/2010/09/23/hello-gdbserver-a-debuggable-jni-example-for-android/
            debuggable true
            minifyEnabled true
        }
    }
    /////////////////
    buildTypes {
        release {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //signingConfig signingConfigs.release
            // https://software.intel.com/en-us/videos/using-the-ndk-with-android-studio
            ndk {
                moduleName "ArtemisLib"
                cFlags "-O3 -finline-limit=300 -fomit-frame-pointer -fpic -fvisibility=hidden"
            }
            signingConfig signingConfigs.config
        }
        debug {
            //signingConfig signingConfigs.debug
            // https://software.intel.com/en-us/videos/using-the-ndk-with-android-studio
            ndk {
                moduleName "ArtemisLib"
                ldLibs "log"
                cFlags "-g -D_DEBUG -DNDK_DEBUG=1"
            }
        }
    }
    ////////////////
    // http://toastdroid.com/2014/03/28/customizing-your-build-with-gradle/
    buildTypes {
        release {
            buildConfigField "int", "MAX_KEYS", "7"
            buildConfigField "int", "MAX_LOCKS", "7"
            buildConfigField "int", "MAX_CHARS", "63"
            buildConfigField "boolean", "SOMEFLAG", "false"
        }
        debug {
            buildConfigField "int", "MAX_KEYS", "7"
            buildConfigField "int", "MAX_LOCKS", "7"
            buildConfigField "int", "MAX_CHARS", "63"
            buildConfigField "boolean", "SOMEFLAG", "true"
        }
    }
    ////////////////
    // https://github.com/ex3ndr/telegram/blob/master/app/build.gradle
    if (project.hasProperty("signStorage")) {
        signingConfigs {
            release {
                storeFile file(project.signStorage)
                storePassword project.signStPass
                keyAlias project.signAlias
                keyPassword project.signKePass
            }
        }
        buildTypes {
            debuggable.initWith(buildTypes.release)
            debuggable {
                signingConfig signingConfigs.release
                debuggable true
            }
            release {
                signingConfig signingConfigs.release
            }
            applicationVariants.all { variant ->
                def file = variant.outputFile
                variant.outputFile = new File(file.parent, file.name.replace(".apk", "-" + defaultConfig.versionName + ".apk"))
            }
        }
    }
/*
    ///////////
    // http://ruenzuo.github.io/continuous-delivery-on-android-part-ii/

    productFlavors {
        free {
            packageName "com.ruenzuo.weatherapp.free"
            buildConfig "public final static boolean IS_FREE = true;"
        }
        paid {
            packageName "com.ruenzuo.weatherapp.paid"
            buildConfig "public final static boolean IS_FREE = false;"
        }
    }
*/
/*
    ///////////////
    // https://software.intel.com/en-us/videos/using-the-ndk-with-android-studio
    // http://tools.android.com/tech-docs/new-build-system/tips
    // http://www.tuicool.com/articles/b6VrUz
    // http://ph0b.com/improving-x86-support-of-android-apps-libs-engines/#ArchDependentAPKs

    flavorDimensions "abi"

    // if arch flavors is disabled, then toolchain builds a fat redist
    productFlavors {
        x86 {
            flavorDimensions "abi"
            ndk { abiFilter "x86" }
            versionCode = 4
        }
        arm {
            flavorDimensions "abi"
            ndk { abiFilter "armeabi" }
            versionCode = 3
        }
        armv7 {
            flavorDimensions "abi"
            ndk { abiFilter "armeabi armeabi-v7a" }
            versionCode = 2
        }
        mips {
            flavorDimensions "abi"
            ndk { abiFilter "mips" }
            versionCode = 1
        }
        fat {
            flavorDimensions "abi"
            versionCode = 0
        }
    }

    // make per-variant version code
    applicationVariants.all { variant ->
        def abiVersion = variant.productFlavors.get(0).versionCode
        variant.mergedFlavor.versionCode = abiVersion * 100000 + defaultConfig.versionCode
    }
*/
    /////////////////
    // http://stackoverflow.com/questions/19242442/how-to-build-only-single-buildtype-with-android-studio-and-or-gradle
/*
    signingConfigs {
        debug {
            storeFile file("debug.keystore")
            storePassword = "android"
            keyAlias = "androiddebugkey"
            keyPassword = "android"
        }
        release {
            storeFile file("release.keystore")
            keyAlias "alias"
            storePassword "foo"
            keyPassword "bar"
        }
    }
*/
    productFlavors {
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:21.0.0'
    compile project(':app2')
}
